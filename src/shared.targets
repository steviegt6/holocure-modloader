<Project ToolsVersion="14.0">
    <Import Project="git.targets" />

    <!-- region Operating System flags -->
    
    <PropertyGroup>
        <Configurations>Release (Windows);Debug (Linux);Debug (Windows);Release (Linux);Release (MacOS);Debug (MacOS)</Configurations>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'Release (Windows)' ">
        <Optimize Condition=" '$(Optimize)' == '' ">true</Optimize>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'Debug (Windows)' ">
        <DebugSymbols Condition=" '$(DebugSymbols)' == '' ">true</DebugSymbols>
        <Optimize Condition=" '$(Optimize)' == '' ">false</Optimize>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'Release (Windows)' ">
        <DefineConstants>TRACE;WINDOWS</DefineConstants>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'Debug (Linux)' ">
        <DefineConstants>TRACE;LINUX</DefineConstants>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'Debug (Windows)' ">
        <DefineConstants>TRACE;WINDOWS</DefineConstants>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'Release (Linux)' ">
        <DefineConstants>TRACE;LINUX</DefineConstants>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'Release (MacOS)' ">
        <DefineConstants>TRACE;MACOS</DefineConstants>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'Debug (MacOS)' ">
        <DefineConstants>TRACE;MACOS</DefineConstants>
    </PropertyGroup>

    <!-- endregion Operating System flags -->
    
    <!-- region Project Presets -->
    
    <PropertyGroup>
        <TargetFramework>net6.0</TargetFramework>
        <LangVersion>latest</LangVersion>
        <Nullable>enable</Nullable>
        
        <SourceRevisionId>$(CurrentCommit)|$(CurrentCommitShort)|$(CurrentBranch)|$(SubmoduleData)</SourceRevisionId>
    </PropertyGroup>

    <!-- endregion Project Presets -->
    
    <!-- region Project Versions -->
    
    <PropertyGroup>
        <UnifiedVersion>0.1.0</UnifiedVersion>
        
        <HoloCureAPIVersion>$(UnifiedVersion)</HoloCureAPIVersion>
        <HoloCureModLoaderVersion>$(UnifiedVersion)</HoloCureModLoaderVersion>
        <HoloCureModLoaderAPIVersion>$(UnifiedVersion)</HoloCureModLoaderAPIVersion>
        <HoloCureModLoaderLoggingVersion>$(UnifiedVersion)</HoloCureModLoaderLoggingVersion>
        <HoloCureModLoaderUpdaterVersion>$(UnifiedVersion)</HoloCureModLoaderUpdaterVersion>
        
        <!-- YYTK -->
        <HoloCureModLoaderYYTKVersion>$(UnifiedVersion)</HoloCureModLoaderYYTKVersion>
        <HoloCureModLoaderYYTKWindowsVersion>$(UnifiedVersion)</HoloCureModLoaderYYTKWindowsVersion>
        <HoloCureModLoaderYYTKMacOSVersion>$(UnifiedVersion)</HoloCureModLoaderYYTKMacOSVersion>
        <HoloCureModLoaderYYTKLinuxVersion>$(UnifiedVersion)</HoloCureModLoaderYYTKLinuxVersion>
        
        <!-- These are submodules and need to be watched closely when updating. -->
        <CodeChickenDiffpatchVersion>1.0.0</CodeChickenDiffpatchVersion>
        <UndertaleModLibVersion>1.0.0</UndertaleModLibVersion>
    </PropertyGroup>

    <!-- endregion Project Versions -->
    
    <!-- region Library redirction. -->
    
    <!-- Taken and partially adapted from tModLoader. -->
    
    <!--See first answer in https://stackoverflow.com/questions/55946010/how-to-specify-output-folder-for-the-referenced-nuget-packages for how this was created-->
    <!--Dotnet Core 3.0 and later don't support subdirectory searching; so we use workaround https://github.com/dotnet/sdk/issues/10366#issuecomment-508854737 -->
    <Target Name="BuildRedirectNugetFilesToLib" AfterTargets="ResolveLockFileCopyLocalFiles">
        <ItemGroup>
            <ReferenceCopyLocalPaths>
                <DirectoryInPackage>$([System.String]::Copy('%(PathInPackage)').Remove($([System.String]::Copy('%(PathInPackage)').LastIndexOf('/'))).Replace('/', '\'))</DirectoryInPackage>
            </ReferenceCopyLocalPaths>
        </ItemGroup>

        <ItemGroup>
            <ReferenceCopyLocalPaths>
                <DestinationSubDirectory>Libraries\$([System.String]::Copy('%(NuGetPackageID)').ToLower())\%(NuGetPackageVersion)\%(DirectoryInPackage)\</DestinationSubDirectory>
            </ReferenceCopyLocalPaths>
        </ItemGroup>
    </Target>

    <!-- In order to get pdbs/xmls while waiting for NET6, we use https://github.com/dotnet/sdk/issues/1458#issuecomment-420456386 -->
    <Target Name="_ResolveCopyLocalNuGetPackagePdbsAndXml" Condition="$(CopyLocalLockFileAssemblies) == true" AfterTargets="ResolveReferences">
        <ItemGroup>
            <ReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths->'%(RootDir)%(Directory)%(Filename).pdb')" Condition="'%(ReferenceCopyLocalPaths.NuGetPackageId)' != '' and Exists('%(RootDir)%(Directory)%(Filename).pdb')" />
            <ReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths->'%(RootDir)%(Directory)%(Filename).xml')" Condition="'%(ReferenceCopyLocalPaths.NuGetPackageId)' != '' and Exists('%(RootDir)%(Directory)%(Filename).xml')" />
        </ItemGroup>
    </Target>

    <Target Name="RedirectAssemblyReferencesToLib" AfterTargets="ResolveAssemblyReferences">
        <ItemGroup>
            <!--To match deps.json for runtime resolving, paths must be of the form Libraries/<name>/<version>-->
            <!--Note that associated files, like pdbs/xmls won't be resolved properly here. Prefer nuget packages for that-->
            <ReferenceCopyLocalPaths Condition="%(ReferenceCopyLocalPaths.ReferenceSourceTarget) == 'ResolveAssemblyReference'">
                <DirectoryVersion>$([System.String]::Copy('%(ReferenceCopyLocalPaths.FusionName)').Remove($([System.String]::Copy('%(ReferenceCopyLocalPaths.FusionName)').IndexOf(", C"))).Substring($([System.String]::Copy('%(ReferenceCopyLocalPaths.FusionName)').IndexOf(","))).Substring(10))</DirectoryVersion>
            </ReferenceCopyLocalPaths>

            <ReferenceCopyLocalPaths Condition="%(ReferenceCopyLocalPaths.ReferenceSourceTarget) == 'ResolveAssemblyReference'">
                <DestinationSubDirectory>Libraries\%(ReferenceCopyLocalPaths.OriginalItemSpec)\%(ReferenceCopyLocalPaths.DirectoryVersion)\</DestinationSubDirectory>
            </ReferenceCopyLocalPaths>
        </ItemGroup>
    </Target>

    <Target Name="RedirectProjectReferencesToLib" AfterTargets="ResolveAssemblyReferences">
        <ItemGroup>
            <!--Version is bugged in deps.json for ProjectReferences, doesn't reflect AssemblyVersion for whatever reason. Uses 1.0.0-->
            <!--As well, FusionName isn't available, so alternate string manipulation to get Name-->

            <!-- This part differs from how it's done in tModLoader -->

            <!-- Extract the DLL name from the path. -->
            <ReferenceCopyLocalPaths Condition="%(ReferenceCopyLocalPaths.ReferenceSourceTarget) == 'ProjectReference'">
                <DllName>$([System.String]::Copy('%(ReferenceCopyLocalPaths.ResolvedFrom)').Remove($([System.String]::Copy('%(ReferenceCopyLocalPaths.ResolvedFrom)').IndexOf(".dll"))).SubString($([System.String]::Copy('%(ReferenceCopyLocalPaths.ResolvedFrom)').LastIndexOf("\"))).Substring(1))</DllName>
            </ReferenceCopyLocalPaths>

            <!-- Convert the DLL name to a dotless name (e.g. "My.Project.Reference" -> "MyProjectReference"). Note that the .dll file extension is not carried over, as DllName omits that. -->
            <ReferenceCopyLocalPaths Condition="%(ReferenceCopyLocalPaths.ReferenceSourceTarget) == 'ProjectReference'">
                <DotlessName>$([System.String]::Copy('%(ReferenceCopyLocalPaths.DllName)').Replace('.', ''))</DotlessName>
            </ReferenceCopyLocalPaths>

            <!-- Set VersionHack to $(<DotlessNameHere>Version). These come from ../shared.targets, where versions are defined. -->
            <ReferenceCopyLocalPaths Condition="%(ReferenceCopyLocalPaths.ReferenceSourceTarget) == 'ProjectReference'">
                <VersionHack>$(%(ReferenceCopyLocalPaths.DotlessName)Version)</VersionHack>
            </ReferenceCopyLocalPaths>

            <!-- Output path: Libraries/ProjectName/ProjectVersion/ -->
            <!-- TODO: FIXME -->
            <!-- <ReferenceCopyLocalPaths Condition="%(ReferenceCopyLocalPaths.ReferenceSourceTarget) == 'ProjectReference'">
                <DestinationSubDirectory>Libraries\%(ReferenceCopyLocalPaths.DllName)\%(ReferenceCopyLocalPaths.VersionHack)\</DestinationSubDirectory>
            </ReferenceCopyLocalPaths> -->
        </ItemGroup>
    </Target>

    <Target Name="OverwriteDevRuntimeTargets" AfterTargets="GenerateBuildRuntimeConfigurationFiles" Condition="$(GenerateRuntimeConfigDevFile) == 'true'">
        <PropertyGroup>
            <DevRuntimeConfig>
                {
                "runtimeOptions": {
                "additionalProbingPaths": [
                "Libraries"
                ]
                }
                }
            </DevRuntimeConfig>
        </PropertyGroup>
        <WriteLinesToFile File="$(ProjectRuntimeConfigDevFilePath)" Lines="$(DevRuntimeConfig)" Overwrite="true" Encoding="UTF-8" />
    </Target>

    <!-- endregion Library redirction. -->
</Project>